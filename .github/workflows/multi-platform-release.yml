name: Multi-Platform Release and Distribution

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 3.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Run quality checks first
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Run quality checks
      run: |
        cargo fmt --check
        cargo clippy -- -D warnings
        cargo test --workspace
    
    - name: Generate quality report
      run: |
        echo "# Release Quality Report" > quality-report.md
        echo "- ✅ Format check passed" >> quality-report.md
        echo "- ✅ Clippy check passed" >> quality-report.md
        echo "- ✅ All tests passed" >> quality-report.md
    
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md

  # Build binaries for all platforms
  build-binaries:
    name: Build ${{ matrix.name }}
    needs: quality-gate
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            artifact: depyler
          
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
            artifact: depyler
            use_cross: true
          
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            artifact: depyler
          
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
            artifact: depyler
          
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            artifact: depyler.exe
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross (Linux ARM64)
      if: matrix.use_cross == true
      run: cargo install cross --git https://github.com/cross-rs/cross
    
    - name: Build binary
      run: |
        if [ "${{ matrix.use_cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }} --features "full"
        else
          cargo build --release --target ${{ matrix.target }} --features "full"
        fi
      shell: bash
    
    - name: Create archive
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/${{ matrix.artifact }} dist/
        cd dist
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../depyler-${{ matrix.name }}.zip ${{ matrix.artifact }}
        else
          tar czf ../depyler-${{ matrix.name }}.tar.gz ${{ matrix.artifact }}
        fi
      shell: bash
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: depyler-${{ matrix.name }}
        path: depyler-${{ matrix.name }}.*

  # Build Docker images
  docker:
    name: Build Docker Images
    needs: quality-gate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' }}
        tags: |
          depyler/depyler:latest
          depyler/depyler:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Build WASM package
  wasm:
    name: Build WASM Package
    needs: quality-gate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown
    
    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
    
    - name: Build WASM
      run: |
        cd crates/depyler-wasm
        wasm-pack build --target web --out-dir pkg
        wasm-pack pack
    
    - name: Upload WASM package
      uses: actions/upload-artifact@v4
      with:
        name: wasm-package
        path: crates/depyler-wasm/pkg/*.tgz

  # Publish to crates.io
  publish-cargo:
    name: Publish to crates.io
    needs: [quality-gate, build-binaries]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish crates in order
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        # Function to publish with retry
        publish_crate() {
          local crate=$1
          echo "Publishing $crate..."
          cd crates/$crate
          
          for i in {1..3}; do
            if cargo publish --no-verify; then
              echo "Successfully published $crate"
              break
            else
              echo "Attempt $i failed, waiting 30s..."
              sleep 30
            fi
          done
          
          cd ../..
          sleep 30
        }
        
        # Publish in dependency order
        publish_crate depyler-annotations
        publish_crate depyler-core
        publish_crate depyler-analyzer
        publish_crate depyler-verify
        publish_crate depyler-quality
        publish_crate depyler-mcp
        publish_crate depyler-ruchy
        publish_crate depyler-wasm
        publish_crate depyler

  # Generate distribution packages
  packages:
    name: Generate Distribution Packages
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate Homebrew formula
      run: |
        mkdir -p homebrew
        cat > homebrew/depyler.rb << 'EOF'
        class Depyler < Formula
          desc "Python-to-Rust transpiler with verification"
          homepage "https://github.com/paiml/depyler"
          version "${{ steps.version.outputs.version }}"
          license "MIT OR Apache-2.0"
          
          if OS.mac? && Hardware::CPU.intel?
            url "https://github.com/paiml/depyler/releases/download/v${{ steps.version.outputs.version }}/depyler-macos-x86_64.tar.gz"
          elsif OS.mac? && Hardware::CPU.arm?
            url "https://github.com/paiml/depyler/releases/download/v${{ steps.version.outputs.version }}/depyler-macos-aarch64.tar.gz"
          elsif OS.linux? && Hardware::CPU.intel?
            url "https://github.com/paiml/depyler/releases/download/v${{ steps.version.outputs.version }}/depyler-linux-x86_64.tar.gz"
          elsif OS.linux? && Hardware::CPU.arm?
            url "https://github.com/paiml/depyler/releases/download/v${{ steps.version.outputs.version }}/depyler-linux-aarch64.tar.gz"
          end
          
          def install
            bin.install "depyler"
          end
          
          test do
            system "#{bin}/depyler", "--version"
          end
        end
        EOF
    
    - name: Generate npm package
      run: |
        mkdir -p npm-package/bin
        cat > npm-package/package.json << 'EOF'
        {
          "name": "@depyler/cli",
          "version": "${{ steps.version.outputs.version }}",
          "description": "Python-to-Rust transpiler CLI",
          "bin": {
            "depyler": "./bin/depyler"
          },
          "scripts": {
            "postinstall": "node install.js"
          },
          "keywords": ["python", "rust", "transpiler", "compiler", "verification"],
          "author": "Depyler Contributors",
          "license": "MIT OR Apache-2.0",
          "repository": {
            "type": "git",
            "url": "https://github.com/paiml/depyler.git"
          },
          "engines": {
            "node": ">=14.0.0"
          }
        }
        EOF
        
        cat > npm-package/install.js << 'EOF'
        const { execSync } = require('child_process');
        const { platform, arch } = process;
        const fs = require('fs');
        const https = require('https');
        
        const version = '${{ steps.version.outputs.version }}';
        let binaryName = 'depyler';
        
        // Determine platform
        let platformName;
        if (platform === 'darwin') {
          platformName = arch === 'arm64' ? 'macos-aarch64' : 'macos-x86_64';
        } else if (platform === 'linux') {
          platformName = arch === 'arm64' ? 'linux-aarch64' : 'linux-x86_64';
        } else if (platform === 'win32') {
          platformName = 'windows-x86_64';
          binaryName = 'depyler.exe';
        } else {
          console.error(`Unsupported platform: ${platform}`);
          process.exit(1);
        }
        
        const url = `https://github.com/paiml/depyler/releases/download/v${version}/depyler-${platformName}.tar.gz`;
        console.log(`Downloading ${url}...`);
        
        // Download and extract binary
        execSync(`curl -L ${url} | tar xz -C bin/`, { stdio: 'inherit' });
        EOF
    
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: distribution-packages
        path: |
          homebrew/
          npm-package/

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: [quality-gate, build-binaries, docker, wasm, packages, publish-cargo]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release notes
      run: |
        cat > release-notes.md << 'EOF'
        # Depyler v${{ steps.version.outputs.version }}
        
        Python-to-Rust transpiler with progressive verification and multi-platform support.
        
        ## 🚀 Quick Start
        
        ### Install via Package Managers
        
        **Cargo (Rust)**
        ```bash
        cargo install depyler
        ```
        
        **Docker**
        ```bash
        docker run -v $(pwd):/workspace depyler/depyler:${{ steps.version.outputs.version }} transpile script.py
        ```
        
        **npm (Coming Soon)**
        ```bash
        npm install -g @depyler/cli
        ```
        
        **Homebrew (Coming Soon)**
        ```bash
        brew install depyler
        ```
        
        ### Direct Download
        
        Download the appropriate binary for your platform from the assets below:
        - Linux: `depyler-linux-x86_64.tar.gz` or `depyler-linux-aarch64.tar.gz`
        - macOS: `depyler-macos-x86_64.tar.gz` or `depyler-macos-aarch64.tar.gz`
        - Windows: `depyler-windows-x86_64.zip`
        
        ## 📦 Available Packages
        
        - **crates.io**: All workspace crates published
        - **Docker Hub**: Multi-arch images (amd64/arm64)
        - **WASM**: Browser-ready package included
        - **Distribution configs**: Homebrew formula and npm package ready
        
        ## ✨ What's New
        
        - Ruchy v1.5.0 integration with self-hosting capabilities
        - Enhanced type inference with Algorithm W
        - Multi-platform binary releases
        - Docker multi-architecture support
        - WASM package for browser integration
        
        ## 📋 Quality Report
        
        All quality gates passed:
        - ✅ Zero clippy warnings
        - ✅ All tests passing
        - ✅ Format check passed
        - ✅ Documentation complete
        
        ---
        
        **Full Changelog**: https://github.com/paiml/depyler/compare/v3.0.0...v${{ steps.version.outputs.version }}
        EOF
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: v${{ steps.version.outputs.version }}
        body_path: release-notes.md
        files: |
          artifacts/depyler-*/*
          artifacts/wasm-package/*
          artifacts/quality-report/*
        draft: false
        prerelease: false

  # Verify release
  verify-release:
    name: Verify Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Wait for crates.io propagation
      if: github.event_name == 'push'
      run: sleep 120
    
    - name: Verify crates.io installation
      if: github.event_name == 'push'
      run: |
        if cargo install depyler --version ${{ steps.version.outputs.version }}; then
          echo "✅ Installation from crates.io successful"
          depyler --version
        else
          echo "⚠️ crates.io installation not yet available"
        fi
    
    - name: Verify Docker image
      if: github.event_name == 'push'
      run: |
        if docker run --rm depyler/depyler:${{ steps.version.outputs.version }} --version; then
          echo "✅ Docker image available"
        else
          echo "⚠️ Docker image not yet available"
        fi
    
    - name: Summary
      run: |
        echo "# Release v${{ steps.version.outputs.version }} Completed! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Distribution Status" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ GitHub Release created with binaries" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Docker images pushed (linux/amd64, linux/arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ WASM package built" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ crates.io packages published" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 Homebrew formula generated" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 npm package configuration created" >> $GITHUB_STEP_SUMMARY