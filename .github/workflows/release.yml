name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run pre-release audit
      run: |
        chmod +x scripts/pre-release-audit.sh
        ./scripts/pre-release-audit.sh
    
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      with:
        name: release-audit
        path: docs/release-audit.md

  publish-crates:
    name: Publish to crates.io
    needs: quality-gate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Publish crates in order
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        # Function to publish with retry
        publish_crate() {
          local crate=$1
          echo "Publishing $crate..."
          cd crates/$crate
          
          # Retry logic for crates.io rate limits
          for i in {1..3}; do
            if cargo publish --no-verify; then
              echo "Successfully published $crate"
              break
            else
              echo "Attempt $i failed, waiting 30s..."
              sleep 30
            fi
          done
          
          cd ../..
          sleep 30  # Wait for crates.io indexing
        }
        
        # Publish in dependency order
        publish_crate depyler-annotations
        publish_crate depyler-core
        publish_crate depyler-analyzer
        publish_crate depyler-verify
        publish_crate depyler-quality
        publish_crate depyler-mcp
        publish_crate depyler-wasm
        publish_crate depyler

  create-release:
    name: Create GitHub Release
    needs: [quality-gate, publish-crates]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Extract changelog
      id: changelog
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        VERSION_NO_V="${VERSION#v}"
        
        # Try to extract from CHANGELOG.md if it exists
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(awk -v ver="## \\[$VERSION_NO_V\\]" '
            $0 ~ ver {p=1; next}
            /^## \[/ && p {exit}
            p {print}
          ' CHANGELOG.md)
        else
          # Generate from git log
          CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Download audit report
      uses: actions/download-artifact@v4
      with:
        name: release-audit
        path: .
    
    - name: Create release body
      id: release_body
      run: |
        cat > release_notes.md << 'EOF'
        # Release ${{ steps.get_version.outputs.VERSION }}
        
        ## üìã Changes
        
        ${{ steps.changelog.outputs.CHANGELOG }}
        
        ## ‚úÖ Quality Report
        
        All Toyota Way quality gates passed:
        - ‚úÖ Zero SATD (no TODO/FIXME/HACK)
        - ‚úÖ Zero incomplete implementations  
        - ‚úÖ All functions < complexity 20
        - ‚úÖ Zero clippy warnings
        - ‚úÖ All tests passing
        - ‚úÖ Documentation complete
        
        See [release-audit.md](https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.VERSION }}/release-audit.md) for detailed report.
        
        ## üöÄ Installation
        
        ```bash
        cargo install depyler
        ```
        
        ## üì¶ Crates Published
        
        All crates have been published to crates.io:
        - depyler-annotations
        - depyler-core
        - depyler-analyzer
        - depyler-verify
        - depyler-quality
        - depyler-mcp
        - depyler-wasm
        - depyler
        
        ---
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ steps.get_version.outputs.VERSION }}
        EOF
        
        echo "BODY<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.release_body.outputs.BODY }}
        files: |
          release-audit.md
        draft: false
        prerelease: false

  verify-release:
    name: Verify Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Wait for crates.io propagation
      run: sleep 60
    
    - name: Verify crates.io installation
      run: |
        # Try to install from crates.io
        if cargo install depyler --version ${VERSION#v}; then
          echo "‚úÖ Installation from crates.io successful"
          depyler --version
        else
          echo "‚ùå Installation failed"
          exit 1
        fi
    
    - name: Smoke test
      run: |
        # Create test Python file
        cat > test.py << 'EOF'
        def add(a: int, b: int) -> int:
            return a + b
        EOF
        
        # Try transpilation
        if depyler transpile test.py; then
          echo "‚úÖ Transpilation successful"
          cat test.rs
        else
          echo "‚ùå Transpilation failed"
          exit 1
        fi