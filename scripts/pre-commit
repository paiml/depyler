#!/bin/bash
# Depyler Pre-commit Quality Gates
# Based on ruchy and paiml-mcp-agent-toolkit standards

set -e

echo "🔍 Depyler Quality Gates - Checking documentation synchronization..."

# Documentation files that MUST be updated with code changes
REQUIRED_DOCS=(
    "docs/execution/roadmap.md"
    "CHANGELOG.md"
)

# Check if any Rust/source files are being committed
if git diff --cached --name-only | grep -qE '\.(rs)$'; then
    echo "📝 Source changes detected - verifying documentation updates..."

    # Ensure at least one documentation file is updated
    DOC_UPDATED=false
    for doc in "${REQUIRED_DOCS[@]}"; do
        if git diff --cached --name-only | grep -q "$doc"; then
            DOC_UPDATED=true
            echo "✓ Found documentation update: $doc"
            break
        fi
    done

    if [ "$DOC_UPDATED" = false ]; then
        echo "❌ ERROR: Code changes require documentation updates!"
        echo "📋 Must update at least one of:"
        for doc in "${REQUIRED_DOCS[@]}"; do
            echo "   - $doc"
        done
        echo ""
        echo "💡 Quick fix:"
        echo "   1. Update docs/execution/roadmap.md with task status"
        echo "   2. Update CHANGELOG.md with feature/fix"
        echo ""
        echo "🎯 Toyota Way: Documentation synchronization ensures quality at source"
        exit 1
    fi
fi

# Verify roadmap.md structure
if git diff --cached --name-only | grep -q "docs/execution/roadmap.md"; then
    # Check for task IDs and completion markers
    ROADMAP=$(git show :docs/execution/roadmap.md 2>/dev/null || cat docs/execution/roadmap.md)

    # Ensure task ID format (DEPYLER-XXXX)
    if ! echo "$ROADMAP" | grep -qE 'DEPYLER-[0-9]{4}'; then
        echo "⚠️  Warning: roadmap.md should use DEPYLER-XXXX task ID format"
    fi

    # Check for status markers
    if ! echo "$ROADMAP" | grep -qE '\[[ x]\]'; then
        echo "⚠️  Warning: roadmap.md should include [x] completion markers"
    fi

    echo "✓ Roadmap.md structure validated"
fi

# Run PMAT quality checks on staged files (Toyota Way Jidoka)
echo "🔧 Running PMAT quality analysis (Toyota Way Jidoka)..."

QUALITY_VIOLATIONS=0

for file in $(git diff --cached --name-only --diff-filter=A | grep -E '\.rs$'); do
    echo "  Checking $file (new file - strict enforcement)..."

    # Skip target directory and test files (production code only)
    if [[ "$file" == target/* ]] || [[ "$file" == **/tests/* ]] || [[ "$file" == *_test.rs ]]; then
        echo "    ⊘ Skipped (target/test file)"
        continue
    fi

    # Complexity check using PMAT
    if command -v pmat &> /dev/null; then
        echo "    Running complexity analysis..."
        if ! pmat analyze complexity --file "$file" --max-cyclomatic 10 --max-cognitive 10 --fail-on-violation &>/dev/null; then
            echo "    ❌ Complexity violation in $file (exceeds Toyota Way standards: ≤10)"
            echo "    🔧 Fix: pmat refactor auto --file $file"
            QUALITY_VIOLATIONS=$((QUALITY_VIOLATIONS + 1))
        else
            echo "    ✓ Complexity check passed (≤10)"
        fi

        # SATD check (zero tolerance)
        echo "    Running SATD analysis..."
        if ! pmat analyze satd --path "$file" --fail-on-violation &>/dev/null; then
            echo "    ❌ SATD violation in $file (zero tolerance policy)"
            echo "    🔧 Fix: Remove all TODO/FIXME/HACK comments"
            QUALITY_VIOLATIONS=$((QUALITY_VIOLATIONS + 1))
        else
            echo "    ✓ SATD check passed (zero debt)"
        fi

        # Entropy check (code readability via information theory)
        echo "    Running entropy analysis..."
        ENTROPY_OUTPUT=$(pmat analyze entropy --path "$file" 2>&1)
        if echo "$ENTROPY_OUTPUT" | grep -q "High entropy detected"; then
            echo "    ⚠️  High entropy detected in $file (may indicate low readability)"
            echo "    💡 Consider refactoring for better readability"
            # Not blocking, but logged as warning
        else
            echo "    ✓ Entropy check passed (good readability)"
        fi
    else
        echo "    ⚠️  PMAT binary not found, skipping quality checks"
        echo "    💡 Install: cargo install pmat"
    fi
done

# TDG (Technical Debt Grading) - Project-wide quality gate
if command -v pmat &> /dev/null; then
    if git diff --cached --name-only | grep -qE '\.rs$'; then
        echo "📊 Running TDG (Technical Debt Grading) analysis..."

        # Run TDG with minimum grade requirement
        TDG_OUTPUT=$(pmat tdg . --min-grade A- --format=summary 2>&1 || true)
        TDG_EXIT_CODE=$?

        if [ $TDG_EXIT_CODE -eq 0 ]; then
            echo "  ✓ TDG grade check passed (≥A- maintained)"
        else
            # Check if TDG command exists
            if echo "$TDG_OUTPUT" | grep -q "no such command\|command not found"; then
                echo "  ⚠️  pmat tdg command not available in this version"
                echo "  💡 Using per-file complexity checks as fallback"
            else
                echo "  ❌ TDG grade below A- threshold"
                echo "  🔧 Fix: Improve code quality to meet A- standard"
                echo ""
                echo "$TDG_OUTPUT"
                QUALITY_VIOLATIONS=$((QUALITY_VIOLATIONS + 1))
            fi
        fi
    fi
fi

# Check for Rust linting if we have Rust files
if git diff --cached --name-only | grep -qE '\.rs$'; then
    echo "🔧 Running Rust linting..."
    if cargo clippy --quiet --all-targets --all-features -- -D warnings &>/dev/null; then
        echo "  ✓ Clippy checks passed (zero warnings)"
    else
        echo "  ❌ Clippy violations found"
        echo "  🔧 Fix: cargo clippy --fix && cargo fmt"
        QUALITY_VIOLATIONS=$((QUALITY_VIOLATIONS + 1))
    fi
fi

# Coverage check (cargo-llvm-cov) - only if available
if command -v cargo-llvm-cov &> /dev/null; then
    echo "📊 Running coverage check..."
    COVERAGE=$(cargo llvm-cov --all-features --workspace --summary-only 2>/dev/null | grep -oP '\d+\.\d+%' | head -1 | sed 's/%//' || echo "0")
    if (( $(echo "$COVERAGE >= 80" | bc -l 2>/dev/null || echo "0") )); then
        echo "  ✓ Coverage check passed ($COVERAGE% ≥ 80%)"
    else
        echo "  ⚠️  Coverage $COVERAGE% below 80% threshold"
        echo "  💡 This is a warning - add tests to improve coverage"
        # Not blocking for now, but logged as warning
    fi
else
    echo "  ⚠️  cargo-llvm-cov not found, skipping coverage check"
    echo "  💡 Install: cargo install cargo-llvm-cov"
fi

# Summary
if [ $QUALITY_VIOLATIONS -gt 0 ]; then
    echo ""
    echo "❌ Pre-commit quality gates FAILED!"
    echo "   Found $QUALITY_VIOLATIONS quality violations"
    echo "   🎯 Toyota Way: Stop the line, fix quality at source"
    echo ""
    echo "🔧 Quick fixes:"
    echo "   cargo fmt              # Auto-format code"
    echo "   cargo clippy --fix     # Auto-fix simple issues"
    echo "   pmat quality-gate      # Run comprehensive quality analysis"
    exit 1
fi

echo ""
echo "✅ All pre-commit quality gates passed!"
echo "   🎯 Toyota Way: Quality built-in, documentation synchronized"
echo "   📝 Documentation updates verified"
echo "   📊 TDG grade ≥A- maintained (Technical Debt Grading)"
echo "   🔧 Code quality standards maintained:"
echo "      • Complexity ≤10 (cyclomatic & cognitive)"
echo "      • Zero SATD (no TODO/FIXME/HACK)"
echo "      • Entropy acceptable (good readability)"
echo "      • Zero clippy warnings"
echo "   ✓ Ready for commit"
