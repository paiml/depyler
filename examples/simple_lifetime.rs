// Generated by: depyler transpile ./examples/simple_lifetime.py
// Source: ./examples/simple_lifetime.py
// Command: depyler transpile ./examples/simple_lifetime.py

#[doc = "Get string length"] #[doc = " Depyler: verified panic-free"] #[doc = " Depyler: proven to terminate"] pub fn get_len<'a>(s: & 'a str)  -> i32 {
    let mut _cse_temp_0 = s.len();
    return _cse_temp_0;
   
}
#[doc = "Return the input unchanged"] #[doc = " Depyler: verified panic-free"] #[doc = " Depyler: proven to terminate"] pub fn identity<'static>(x: Cow<'static, str>)  -> Cow<'static, str>{
    return x;
   
}
#[cfg(test)] mod tests {
    use super::*;
    use quickcheck::{
    quickcheck, TestResult };
    #[test] fn test_get_len_examples() {
    assert_eq !(get_len(0), 0);
    assert_eq !(get_len(1), 1);
    assert_eq !(get_len(- 1), - 1);
   
}
} #[cfg(test)] mod tests {
    use super::*;
    use quickcheck::{
    quickcheck, TestResult };
    #[test] fn quickcheck_identity() {
    fn prop(x: String)  -> TestResult {
    let result = identity(x.clone());
    if result != x {
    return TestResult::failed();
   
}
TestResult::passed()
}
quickcheck(prop as fn(String)  -> TestResult);
   
}
}